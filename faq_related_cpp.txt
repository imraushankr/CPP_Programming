=====================================================
          FREQUENTLY ASKED QUESTIONS ABOUT C++
=====================================================

BASIC CONCEPTS
==============

Q1: What is a preprocessor in C++?
A: The preprocessor is a program that processes your source code before compilation. It handles preprocessor directives (lines starting with #) such as:
- #include: Include header files
- #define: Define macros
- #ifdef, #ifndef: Conditional compilation
- #pragma: Compiler-specific directives
The preprocessor performs text replacement and file inclusion before the actual compilation begins.

Q2: Why do we always return 0 in the main function?
A: The return value of main() indicates the exit status of the program to the operating system:
- 0 means successful execution
- Non-zero values indicate error conditions
- If you don't explicitly return a value, the compiler automatically returns 0
- The OS can check this value to determine if the program executed successfully
- In scripts or batch files, you can use this return value for error handling

Q3: Are cin and cout functions, methods, or objects?
A: cin and cout are OBJECTS, not functions or methods:
- cin is an object of class istream (input stream)
- cout is an object of class ostream (output stream)
- They are predefined global objects in the iostream library
- The << and >> are overloaded operators for these objects
- Example: cout << "Hello" uses the << operator of the cout object

Q4: What's the difference between #include <iostream> and #include "iostream"?
A: Angle brackets vs quotes indicate where the compiler searches for files:
- #include <iostream>: Search in system/standard directories first
- #include "iostream": Search in current directory first, then system directories
- Use <> for standard library headers
- Use "" for user-defined header files

Q5: What is the difference between C and C++?
A: Key differences:
- C++ supports OOP (classes, objects, inheritance, polymorphism)
- C++ has function overloading, C doesn't
- C++ has references, C only has pointers
- C++ has bool data type, C uses int for boolean
- C++ has inline functions, C uses macros
- C++ has stronger type checking
- C++ supports generic programming with templates

COMPILATION AND EXECUTION
=========================

Q6: What happens during C++ compilation?
A: The compilation process has four stages:
1. Preprocessing: Handle #include, #define, etc.
2. Compilation: Convert source code to assembly language
3. Assembly: Convert assembly to machine code (object files)
4. Linking: Combine object files and libraries into executable

Q7: What's the difference between compilation error and runtime error?
A: 
- Compilation errors: Detected during compilation (syntax errors, type mismatches)
- Runtime errors: Occur during program execution (division by zero, array out of bounds)
- Compilation errors prevent executable creation
- Runtime errors crash the program or produce incorrect results

Q8: What is a linker and what does it do?
A: The linker combines object files and libraries to create an executable:
- Resolves external references (functions, variables from other files)
- Combines multiple object files
- Links with standard libraries
- Creates the final executable file
- Reports linking errors if references can't be resolved

DATA TYPES AND VARIABLES
========================

Q9: What's the difference between int, long, long long?
A: They differ in size and range:
- int: Usually 32 bits (range: -2^31 to 2^31-1)
- long: At least 32 bits, often same as int on 32-bit systems
- long long: At least 64 bits (range: -2^63 to 2^63-1)
- Actual sizes are platform-dependent
- Use sizeof() operator to check actual sizes

Q10: What's the difference between float and double?
A: Precision and size differences:
- float: 32 bits, ~7 decimal digits precision
- double: 64 bits, ~15 decimal digits precision
- double is default for floating-point literals
- float requires 'f' suffix: 3.14f
- double provides better precision for calculations

Q11: What is the difference between signed and unsigned integers?
A: 
- Signed: Can store positive and negative numbers
- Unsigned: Can only store positive numbers (including zero)
- Unsigned has twice the positive range of signed
- Example: unsigned int (0 to 4,294,967,295), int (-2,147,483,648 to 2,147,483,647)

Q12: What's the difference between char, string, and char array?
A: 
- char: Single character ('A', '5', '@')
- char array: Array of characters ("Hello\0")
- string: C++ class for handling text (std::string)
- char arrays are null-terminated, strings are not
- string class provides many built-in methods

OPERATORS
=========

Q13: What's the difference between ++i and i++?
A: Pre-increment vs post-increment:
- ++i: Increment first, then return new value
- i++: Return current value, then increment
- In loops, ++i is often preferred (slightly more efficient)
- In expressions, the difference matters: int a = ++i vs int a = i++

Q14: What's the difference between = and ==?
A: Assignment vs comparison:
- = : Assignment operator (assigns value)
- == : Equality comparison operator (compares values)
- Common mistake: using = instead of == in if statements
- = returns the assigned value, == returns true/false

Q15: What does the sizeof operator do?
A: sizeof returns the size in bytes:
- sizeof(int): Size of int data type
- sizeof(variable): Size of a variable
- sizeof(array): Total size of array
- Evaluated at compile-time
- Returns size_t type

FUNCTIONS
=========

Q16: What's the difference between pass by value and pass by reference?
A: How arguments are passed to functions:
- Pass by value: Copy of variable is passed (changes don't affect original)
- Pass by reference: Reference to original variable is passed (changes affect original)
- Pass by value: func(int x)
- Pass by reference: func(int& x)

Q17: What is function overloading?
A: Multiple functions with the same name but different parameters:
- Different number of parameters
- Different types of parameters
- Compiler chooses correct function based on arguments
- Return type alone cannot be used for overloading

Q18: What are inline functions?
A: Functions whose code is expanded at the call site:
- Eliminates function call overhead
- Defined with 'inline' keyword
- Compiler may ignore inline request for complex functions
- Alternative to macros with type safety

Q19: What's the difference between functions and methods?
A: 
- Functions: Standalone procedures not associated with any class
- Methods: Functions that belong to a class or object
- In C++, "member functions" is the preferred term for methods
- Functions are called directly, methods are called on objects

POINTERS AND MEMORY
===================

Q20: What are pointers and why do we need them?
A: Pointers store memory addresses:
- Enable dynamic memory allocation
- Allow functions to modify variables
- Efficient for large data structures
- Enable data structures like linked lists
- Provide low-level memory access

Q21: What's the difference between pointers and references?
A: 
- Pointers: Can be null, can be reassigned, require dereferencing (*)
- References: Cannot be null, cannot be reassigned, automatic dereferencing
- Pointers have their own memory address, references don't
- References must be initialized when declared

Q22: What are dangling pointers?
A: Pointers that point to memory that has been deallocated:
- Accessing dangling pointers causes undefined behavior
- Common causes: deleting memory, returning local variable addresses
- Prevention: Set pointers to nullptr after deletion

Q23: What are memory leaks?
A: Memory allocated but never deallocated:
- Causes programs to consume increasing memory
- Eventually leads to out-of-memory errors
- Prevention: Every 'new' should have corresponding 'delete'
- Modern C++ uses smart pointers to avoid leaks

Q24: What's the difference between new/delete and malloc/free?
A: 
- new/delete: C++ operators, call constructors/destructors
- malloc/free: C functions, only allocate/deallocate memory
- new is type-safe, malloc returns void*
- Use new/delete in C++, malloc/free in C

OBJECT-ORIENTED PROGRAMMING
===========================

Q25: What's the difference between class and struct in C++?
A: Only default access level differs:
- class: Members are private by default
- struct: Members are public by default
- Both can have constructors, destructors, inheritance
- Convention: Use struct for simple data containers

Q26: What are constructors and destructors?
A: Special member functions:
- Constructor: Called when object is created, initializes object
- Destructor: Called when object is destroyed, cleanup resources
- Constructor has same name as class
- Destructor has same name with ~ prefix

Q27: What's the difference between public, private, and protected?
A: Access specifiers control member visibility:
- public: Accessible from anywhere
- private: Accessible only within the same class
- protected: Accessible within class and derived classes
- Encapsulation principle: Keep data private, provide public interface

Q28: What is inheritance?
A: Creating new classes based on existing classes:
- Derived class inherits properties and methods from base class
- Promotes code reusability
- Establishes "is-a" relationship
- Types: Single, multiple, multilevel, hierarchical

Q29: What is polymorphism?
A: One interface, multiple implementations:
- Compile-time: Function overloading, operator overloading
- Runtime: Virtual functions, function overriding
- Enables code flexibility and extensibility

Q30: What are virtual functions?
A: Functions that can be overridden in derived classes:
- Enable runtime polymorphism
- Function call resolved at runtime based on object type
- Declared with 'virtual' keyword in base class
- Enable dynamic binding

ARRAYS AND STRINGS
==================

Q31: What's the difference between arrays and vectors?
A: 
- Arrays: Fixed size, no bounds checking, C-style
- Vectors: Dynamic size, bounds checking, C++ STL container
- Vectors provide methods like push_back(), size(), etc.
- Vectors are safer and more flexible

Q32: How are strings handled in C++?
A: Two main ways:
- C-style strings: char arrays, null-terminated
- C++ strings: std::string class with built-in methods
- std::string is preferred for ease of use and safety

Q33: What does array[index] actually do?
A: It's pointer arithmetic:
- array[i] is equivalent to *(array + i)
- Array name represents address of first element
- Adding i moves i positions forward in memory

TEMPLATES AND STL
=================

Q34: What are templates?
A: Generic programming feature:
- Write code that works with multiple data types
- Function templates and class templates
- Code reusability without sacrificing type safety
- Templates are instantiated at compile-time

Q35: What is STL?
A: Standard Template Library:
- Collection of template classes and functions
- Containers (vector, list, map, set)
- Algorithms (sort, find, search)
- Iterators (for traversing containers)

Q36: What are iterators?
A: Objects that point to elements in containers:
- Similar to pointers but more abstract
- Provide uniform interface for container traversal
- Types: input, output, forward, bidirectional, random access

EXCEPTION HANDLING
==================

Q37: What is exception handling?
A: Mechanism to handle runtime errors:
- try: Block where exceptions might occur
- catch: Block to handle specific exceptions
- throw: Generate an exception
- Provides graceful error handling

Q38: When should we use exceptions?
A: Use exceptions for:
- Unexpected error conditions
- Error propagation across function boundaries
- When normal return values can't indicate errors
- Don't use for normal program flow

FILE I/O
========

Q39: How do we read and write files in C++?
A: Using file stream classes:
- ifstream: Input file stream (reading)
- ofstream: Output file stream (writing)
- fstream: Both input and output
- Always check if file opened successfully

COMMON MISTAKES AND DEBUGGING
=============================

Q40: Why do I get "segmentation fault"?
A: Common causes:
- Accessing null or invalid pointers
- Array bounds violation
- Stack overflow (infinite recursion)
- Using uninitialized pointers
- Double deletion of memory

Q41: What does "undefined behavior" mean?
A: Code that has no predictable outcome:
- Accessing out-of-bounds array elements
- Using uninitialized variables
- Dereferencing null pointers
- Integer overflow in signed arithmetic

Q42: Why doesn't my program compile?
A: Common compilation errors:
- Missing semicolons
- Undeclared variables or functions
- Type mismatches
- Missing header files
- Syntax errors

PERFORMANCE AND BEST PRACTICES
==============================

Q43: How can I make my C++ program faster?
A: Optimization techniques:
- Use appropriate data structures
- Avoid unnecessary copying (use references)
- Use const when possible
- Enable compiler optimizations (-O2, -O3)
- Profile before optimizing

Q44: What is RAII?
A: Resource Acquisition Is Initialization:
- Acquire resources in constructor
- Release resources in destructor
- Ensures automatic cleanup
- Prevents resource leaks

Q45: Should I use C-style casts or C++ casts?
A: Use C++ casts:
- static_cast: Safe conversions
- dynamic_cast: Runtime type checking
- const_cast: Remove const qualifier
- reinterpret_cast: Low-level conversions
- C++ casts are safer and more explicit

MODERN C++ (C++11 and later)
============================

Q46: What are smart pointers?
A: Automatic memory management:
- unique_ptr: Exclusive ownership
- shared_ptr: Shared ownership with reference counting
- weak_ptr: Non-owning reference to shared_ptr
- Automatically delete memory when no longer needed

Q47: What are lambda expressions?
A: Anonymous functions:
- [capture](parameters) -> return_type { body }
- Useful for short functions and algorithms
- Can capture variables from surrounding scope

Q48: What is auto keyword?
A: Automatic type deduction:
- Compiler deduces variable type from initializer
- Reduces verbosity, especially with complex types
- Must be initialized when declared

Q49: What are range-based for loops?
A: Simplified iteration over containers:
- for(auto element : container) { }
- Cleaner syntax than traditional for loops
- Works with arrays, STL containers, and custom types

Q50: What is move semantics?
A: Optimization for temporary objects:
- Transfer resources instead of copying
- Move constructor and move assignment operator
- Eliminates unnecessary copies
- Improves performance for expensive operations

MISCELLANEOUS
=============

Q51: What's the difference between const and #define?
A: 
- const: Creates typed constant variable, scope-aware
- #define: Text replacement by preprocessor, no type checking
- const is preferred in C++ for type safety

Q52: What is namespace and why use it?
A: Prevents name collisions:
- Logical grouping of related code
- Avoids naming conflicts in large projects
- std namespace contains standard library
- Use 'using' declaration or fully qualified names

Q53: What's the difference between stack and heap memory?
A: 
- Stack: Fast, automatic cleanup, limited size, local variables
- Heap: Slower, manual management, large size, dynamic allocation
- Stack overflow vs heap fragmentation

Q54: What are header guards?
A: Prevent multiple inclusions of same header:
- #ifndef, #define, #endif pattern
- Or use #pragma once
- Prevents redefinition errors

Q55: Why use const correctness?
A: Benefits of using const:
- Prevents accidental modifications
- Compiler optimizations
- Better code documentation
- Enables function overloading based on const

=====================================================
                    END OF FAQ
=====================================================