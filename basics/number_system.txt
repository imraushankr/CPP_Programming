=====================================================
      INTRODUCTION TO PROGRAMMING - NUMBER SYSTEMS
=====================================================

OVERVIEW
========
Number systems are fundamental concepts in programming and computer science. Different number systems use different bases to represent numerical values. Understanding these systems is crucial for programming because computers operate using different numerical representations internally.

The most commonly used number systems in computing are:
- Binary (Base 2) - Uses digits 0, 1
- Decimal (Base 10) - Uses digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
- Octal (Base 8) - Uses digits 0, 1, 2, 3, 4, 5, 6, 7
- Hexadecimal (Base 16) - Uses digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F

WHY NUMBER SYSTEMS MATTER IN PROGRAMMING
=======================================
1. Computers internally work with binary (0s and 1s)
2. Memory addresses are often represented in hexadecimal
3. File permissions in Unix/Linux use octal notation
4. Color codes in web development use hexadecimal
5. Understanding bitwise operations requires binary knowledge
6. Network programming involves various number system conversions
7. Low-level programming and hardware interfacing

=====================================================
            BINARY NUMBER SYSTEM (BASE 2)
=====================================================

WHAT IS BINARY?
===============
Binary is the fundamental number system used by computers. It uses only two digits: 0 and 1. Each digit position represents a power of 2, starting from 2^0 on the rightmost side.

BINARY CHARACTERISTICS:
- Base: 2
- Digits used: 0, 1
- Each position represents a power of 2
- Rightmost position is 2^0 = 1
- Next position is 2^1 = 2, then 2^2 = 4, and so on

BINARY TO DECIMAL CONVERSION
============================
To convert binary to decimal, multiply each digit by 2 raised to its position power (starting from 0 on the right), then sum all results.

Formula: Sum of (digit × 2^position)

EXAMPLE 1: Convert 1101011₂ to decimal
Position:  6  5  4  3  2  1  0
Binary:    1  1  0  1  0  1  1
Power:    2⁶ 2⁵ 2⁴ 2³ 2² 2¹ 2⁰
Values:   64 32  0  8  0  2  1

Calculation:
1×2⁶ + 1×2⁵ + 0×2⁴ + 1×2³ + 0×2² + 1×2¹ + 1×2⁰
= 1×64 + 1×32 + 0×16 + 1×8 + 0×4 + 1×2 + 1×1
= 64 + 32 + 0 + 8 + 0 + 2 + 1
= 107₁₀

EXAMPLE 2: Convert 10110₂ to decimal
Position:  4  3  2  1  0
Binary:    1  0  1  1  0
Power:    2⁴ 2³ 2² 2¹ 2⁰
Values:   16  0  4  2  0

Calculation:
1×16 + 0×8 + 1×4 + 1×2 + 0×1 = 16 + 0 + 4 + 2 + 0 = 22₁₀

DECIMAL TO BINARY CONVERSION
============================
To convert decimal to binary, repeatedly divide the decimal number by 2 and track the remainders. The binary number is formed by reading the remainders from bottom to top.

Method: Divide by 2, record remainder, repeat until quotient is 0

EXAMPLE 1: Convert 107₁₀ to binary
107 ÷ 2 = 53 remainder 1
53  ÷ 2 = 26 remainder 1
26  ÷ 2 = 13 remainder 0
13  ÷ 2 = 6  remainder 1
6   ÷ 2 = 3  remainder 0
3   ÷ 2 = 1  remainder 1
1   ÷ 2 = 0  remainder 1

Reading remainders from bottom to top: 1101011₂

EXAMPLE 2: Convert 25₁₀ to binary
25 ÷ 2 = 12 remainder 1
12 ÷ 2 = 6  remainder 0
6  ÷ 2 = 3  remainder 0
3  ÷ 2 = 1  remainder 1
1  ÷ 2 = 0  remainder 1

Reading remainders from bottom to top: 11001₂

BINARY ARITHMETIC
=================
Basic binary arithmetic operations:

BINARY ADDITION:
0 + 0 = 0
0 + 1 = 1
1 + 0 = 1
1 + 1 = 10 (0 with carry 1)

Example: 1011₂ + 1101₂
   1011
 + 1101
 ------
  11000

BINARY SUBTRACTION:
0 - 0 = 0
1 - 0 = 1
1 - 1 = 0
0 - 1 = 1 (with borrow)

=====================================================
            OCTAL NUMBER SYSTEM (BASE 8)
=====================================================

WHAT IS OCTAL?
==============
Octal is a base-8 number system that uses eight digits: 0, 1, 2, 3, 4, 5, 6, 7. Each position represents a power of 8.

OCTAL CHARACTERISTICS:
- Base: 8
- Digits used: 0, 1, 2, 3, 4, 5, 6, 7
- Each position represents a power of 8
- Rightmost position is 8^0 = 1
- Next position is 8^1 = 8, then 8^2 = 64, and so on

OCTAL TO DECIMAL CONVERSION
===========================
To convert octal to decimal, multiply each digit by 8 raised to its position power, then sum the results.

Formula: Sum of (digit × 8^position)

EXAMPLE 1: Convert 127₈ to decimal
Position:  2  1  0
Octal:     1  2  7
Power:    8² 8¹ 8⁰
Values:   64  8  1

Calculation:
1×8² + 2×8¹ + 7×8⁰
= 1×64 + 2×8 + 7×1
= 64 + 16 + 7
= 87₁₀

EXAMPLE 2: Convert 456₈ to decimal
4×8² + 5×8¹ + 6×8⁰
= 4×64 + 5×8 + 6×1
= 256 + 40 + 6
= 302₁₀

DECIMAL TO OCTAL CONVERSION
===========================
To convert decimal to octal, repeatedly divide by 8 and track remainders.

EXAMPLE 1: Convert 87₁₀ to octal
87 ÷ 8 = 10 remainder 7
10 ÷ 8 = 1  remainder 2
1  ÷ 8 = 0  remainder 1

Reading remainders from bottom to top: 127₈

EXAMPLE 2: Convert 156₁₀ to octal
156 ÷ 8 = 19 remainder 4
19  ÷ 8 = 2  remainder 3
2   ÷ 8 = 0  remainder 2

Reading remainders from bottom to top: 234₈

BINARY TO OCTAL CONVERSION
==========================
Group binary digits in sets of 3 (from right to left), then convert each group to its octal equivalent.

Binary to Octal Mapping:
000₂ = 0₈    100₂ = 4₈
001₂ = 1₈    101₂ = 5₈
010₂ = 2₈    110₂ = 6₈
011₂ = 3₈    111₂ = 7₈

EXAMPLE: Convert 1101011₂ to octal
Group from right: 1|101|011
1₂ = 1₈
101₂ = 5₈
011₂ = 3₈
Result: 153₈

=====================================================
          HEXADECIMAL NUMBER SYSTEM (BASE 16)
=====================================================

WHAT IS HEXADECIMAL?
====================
Hexadecimal is a base-16 number system that uses sixteen symbols: 0-9 and A-F, where A=10, B=11, C=12, D=13, E=14, F=15.

HEXADECIMAL CHARACTERISTICS:
- Base: 16
- Digits used: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
- A=10, B=11, C=12, D=13, E=14, F=15
- Each position represents a power of 16
- Rightmost position is 16^0 = 1
- Next position is 16^1 = 16, then 16^2 = 256, and so on

DECIMAL TO HEXADECIMAL CONVERSION
=================================
To convert decimal to hexadecimal, repeatedly divide by 16 and track remainders.

EXAMPLE 1: Convert 255₁₀ to hexadecimal
255 ÷ 16 = 15 remainder 15 (F)
15  ÷ 16 = 0  remainder 15 (F)

Reading remainders from bottom to top: FF₁₆

EXAMPLE 2: Convert 3567₁₀ to hexadecimal
3567 ÷ 16 = 222 remainder 15 (F)
222  ÷ 16 = 13  remainder 14 (E)
13   ÷ 16 = 0   remainder 13 (D)

Reading remainders from bottom to top: DEF₁₆

HEXADECIMAL TO DECIMAL CONVERSION
=================================
To convert hexadecimal to decimal, multiply each digit by 16 raised to its position power.

EXAMPLE 1: Convert B7₁₆ to decimal
B×16¹ + 7×16⁰
= 11×16 + 7×1
= 176 + 7
= 183₁₀

EXAMPLE 2: Convert 2AF₁₆ to decimal
2×16² + A×16¹ + F×16⁰
= 2×256 + 10×16 + 15×1
= 512 + 160 + 15
= 687₁₀

BINARY TO HEXADECIMAL CONVERSION
================================
Group binary digits in sets of 4 (from right to left), then convert each group to its hexadecimal equivalent.

Binary to Hexadecimal Mapping:
0000₂ = 0₁₆    1000₂ = 8₁₆
0001₂ = 1₁₆    1001₂ = 9₁₆
0010₂ = 2₁₆    1010₂ = A₁₆
0011₂ = 3₁₆    1011₂ = B₁₆
0100₂ = 4₁₆    1100₂ = C₁₆
0101₂ = 5₁₆    1101₂ = D₁₆
0110₂ = 6₁₆    1110₂ = E₁₆
0111₂ = 7₁₆    1111₂ = F₁₆

EXAMPLE: Convert 1101011₂ to hexadecimal
Group from right: 110|1011
Pad left group with zero: 0110|1011
0110₂ = 6₁₆
1011₂ = B₁₆
Result: 6B₁₆

=====================================================
              QUICK CONVERSION REFERENCE
=====================================================

DECIMAL TO OTHER BASES
======================
Decimal  Binary    Octal  Hexadecimal
0        0000      0      0
1        0001      1      1
2        0010      2      2
3        0011      3      3
4        0100      4      4
5        0101      5      5
6        0110      6      6
7        0111      7      7
8        1000      10     8
9        1001      11     9
10       1010      12     A
11       1011      13     B
12       1100      14     C
13       1101      15     D
14       1110      16     E
15       1111      17     F
16       10000     20     10

BINARY GROUP CONVERSIONS
========================

Binary to Octal (groups of 3):
000₂ = 0₈    100₂ = 4₈
001₂ = 1₈    101₂ = 5₈
010₂ = 2₈    110₂ = 6₈
011₂ = 3₈    111₂ = 7₈

Binary to Hexadecimal (groups of 4):
0000₂ = 0₁₆    1000₂ = 8₁₆
0001₂ = 1₁₆    1001₂ = 9₁₆
0010₂ = 2₁₆    1010₂ = A₁₆
0011₂ = 3₁₆    1011₂ = B₁₆
0100₂ = 4₁₆    1100₂ = C₁₆
0101₂ = 5₁₆    1101₂ = D₁₆
0110₂ = 6₁₆    1110₂ = E₁₆
0111₂ = 7₁₆    1111₂ = F₁₆

CONVERSION SHORTCUTS
====================

Binary ↔ Octal:
- Binary to Octal: Group binary digits in 3s from right, convert each group
- Octal to Binary: Convert each octal digit to 3 binary digits

Binary ↔ Hexadecimal:
- Binary to Hex: Group binary digits in 4s from right, convert each group
- Hex to Binary: Convert each hex digit to 4 binary digits

Octal ↔ Hexadecimal:
- Convert through binary or decimal as intermediate step

=====================================================
               PROGRAMMING APPLICATIONS
=====================================================

WHY NUMBER SYSTEMS MATTER IN PROGRAMMING
========================================

1. MEMORY ADDRESSING
   - Memory addresses are typically displayed in hexadecimal
   - Example: 0x7FFF5B2A4C10 (memory address)
   - Easier to read than long binary sequences

2. BITWISE OPERATIONS
   - Understanding binary is crucial for bit manipulation
   - AND, OR, XOR, NOT operations work on binary level
   - Used in flags, permissions, optimization

3. FILE PERMISSIONS (Unix/Linux)
   - Octal notation for file permissions
   - Example: chmod 755 filename
   - 7 = 111₂ (read, write, execute)
   - 5 = 101₂ (read, execute)

4. COLOR CODES
   - Hexadecimal in web development
   - Example: #FF0000 (red), #00FF00 (green), #0000FF (blue)
   - Each pair represents Red, Green, Blue values (0-255)

5. NETWORK ADDRESSING
   - IP addresses, subnet masks
   - MAC addresses in hexadecimal
   - Binary for subnet calculations

6. LOW-LEVEL PROGRAMMING
   - Assembly language programming
   - Hardware register manipulation
   - Embedded systems programming

7. DATA ENCODING
   - Character encoding (ASCII, Unicode)
   - Image and audio file formats
   - Compression algorithms

COMMON PROGRAMMING NOTATIONS
============================

Different programming languages use various prefixes to denote number systems:

BINARY NOTATION:
- C/C++: 0b1101011 or 0B1101011
- Python: 0b1101011
- Java: 0b1101011 (Java 7+)

OCTAL NOTATION:
- C/C++: 0127 (leading zero)
- Python: 0o127 or 0O127
- Java: 0127

HEXADECIMAL NOTATION:
- C/C++: 0xFF or 0XFF
- Python: 0xFF or 0xff
- Java: 0xFF
- HTML/CSS: #FF0000

ASSEMBLY LANGUAGE:
- Binary: 11011011b
- Hexadecimal: 0DBh or $DB

PRACTICAL EXAMPLES IN PROGRAMMING
=================================

1. BIT FLAGS EXAMPLE:
   const int READ_PERMISSION  = 0b001;  // 1
   const int WRITE_PERMISSION = 0b010;  // 2
   const int EXEC_PERMISSION  = 0b100;  // 4
   
   int permissions = READ_PERMISSION | WRITE_PERMISSION;  // 3

2. COLOR MANIPULATION:
   int red   = 0xFF0000;  // 16711680 in decimal
   int green = 0x00FF00;  // 65280 in decimal
   int blue  = 0x0000FF;  // 255 in decimal

3. MEMORY ALIGNMENT:
   Address: 0x1000 (4096 in decimal)
   Next aligned address: 0x1008 (4104 in decimal)

=====================================================
                  PRACTICE PROBLEMS
=====================================================

CONVERSION EXERCISES
===================

PROBLEM SET 1: DECIMAL TO OTHER BASES
1. Convert 156₁₀ to binary
2. Convert 87₁₀ to octal
3. Convert 255₁₀ to hexadecimal
4. Convert 1024₁₀ to binary
5. Convert 512₁₀ to hexadecimal

PROBLEM SET 2: BINARY CONVERSIONS
1. Convert 1011101₂ to decimal
2. Convert 11110000₂ to hexadecimal
3. Convert 101101110₂ to octal
4. Convert 10101010₂ to decimal
5. Convert 11111111₂ to hexadecimal

PROBLEM SET 3: OCTAL CONVERSIONS
1. Convert 345₈ to decimal
2. Convert 777₈ to binary
3. Convert 123₈ to hexadecimal
4. Convert 456₈ to decimal
5. Convert 100₈ to binary

PROBLEM SET 4: HEXADECIMAL CONVERSIONS
1. Convert AB₁₆ to binary
2. Convert FF₁₆ to decimal
3. Convert 1A3₁₆ to octal
4. Convert C0DE₁₆ to decimal
5. Convert BEEF₁₆ to binary

PROBLEM SET 5: MIXED CONVERSIONS
1. Convert 1010₂ to octal and hexadecimal
2. Convert 63₁₀ to all other bases
3. Convert 77₈ to binary and hexadecimal
4. Convert 2F₁₆ to decimal and binary
5. Convert 11001100₂ to decimal, octal, and hexadecimal

ANSWERS TO PRACTICE PROBLEMS
============================

PROBLEM SET 1 ANSWERS:
1. 156₁₀ = 10011100₂
2. 87₁₀ = 127₈
3. 255₁₀ = FF₁₆
4. 1024₁₀ = 10000000000₂
5. 512₁₀ = 200₁₆

PROBLEM SET 2 ANSWERS:
1. 1011101₂ = 93₁₀
2. 11110000₂ = F0₁₆
3. 101101110₂ = 556₈
4. 10101010₂ = 170₁₀
5. 11111111₂ = FF₁₆

PROBLEM SET 3 ANSWERS:
1. 345₈ = 229₁₀
2. 777₈ = 111111111₂
3. 123₈ = 53₁₆
4. 456₈ = 302₁₀
5. 100₈ = 1000000₂

PROBLEM SET 4 ANSWERS:
1. AB₁₆ = 10101011₂
2. FF₁₆ = 255₁₀
3. 1A3₁₆ = 643₈
4. C0DE₁₆ = 49374₁₀
5. BEEF₁₆ = 1011111011101111₂

PROBLEM SET 5 ANSWERS:
1. 1010₂ = 12₈ = A₁₆
2. 63₁₀ = 111111₂ = 77₈ = 3F₁₆
3. 77₈ = 111111₂ = 3F₁₆
4. 2F₁₆ = 47₁₀ = 101111₂
5. 11001100₂ = 204₁₀ = 314₈ = CC₁₆

=====================================================
                      SUMMARY
=====================================================

IMPORTANCE OF NUMBER SYSTEMS
============================
Understanding number systems is essential for programming because:

1. FUNDAMENTAL UNDERSTANDING:
   - Computers operate in binary at the hardware level
   - All data is ultimately stored as binary sequences
   - Understanding binary helps grasp how computers work internally

2. PRACTICAL APPLICATIONS:
   - Memory addresses use hexadecimal representation
   - File permissions in Unix/Linux use octal notation
   - Color codes in web development use hexadecimal
   - Bitwise operations require binary understanding

3. PROGRAMMING EFFICIENCY:
   - Different representations suit different contexts
   - Hexadecimal for memory addresses and color codes
   - Binary for bitwise operations and flags
   - Octal for file permissions

4. DEBUGGING AND OPTIMIZATION:
   - Understanding memory layout and addressing
   - Bit manipulation for performance optimization
   - Low-level programming and hardware interfacing

5. COMPUTER SCIENCE FOUNDATIONS:
   - Data structures and algorithms
   - Computer architecture understanding
   - Network programming concepts

KEY TAKEAWAYS
=============
1. Each number system has its specific use cases in programming
2. Conversion between systems is a fundamental skill
3. Understanding binary is crucial for bitwise operations
4. Hexadecimal provides a compact representation for binary data
5. Practice with conversions builds strong foundational skills
6. Modern programming often abstracts these details, but understanding them makes you a better programmer

NEXT STEPS
==========
After mastering number systems, you should explore:
1. Bitwise operations (AND, OR, XOR, NOT, shifts)
2. Data representation (signed/unsigned integers, floating-point)
3. Character encoding (ASCII, Unicode)
4. Memory management and addressing
5. Computer architecture fundamentals

Remember: While modern programming languages handle most number system conversions automatically, understanding these concepts is crucial for becoming a proficient programmer and computer scientist.

=====================================================
              END OF NUMBER SYSTEMS GUIDE
=====================================================