C++ BASIC CONCEPTS - COMPLETE REFERENCE

COMPUTER MEMORY UNITS
=====================

BIT (Binary Digit)
- Smallest unit of data in computer
- Can store either 0 or 1
- Short for Binary Digit
- Represents on/off state in transistor
- 1 Bit = Binary Number Representation

BYTE
- Collection of 8 bits
- 8 bits = 1 byte
- Standard unit for measuring computer memory
- Can represent 256 different values (2^8)

MEMORY HIERARCHY
- 1024 bytes = 1 KB (Kilobyte)
- 1024 KB = 1 MB (Megabyte)  
- 1024 MB = 1 GB (Gigabyte)
- 1024 GB = 1 TB (Terabyte)
- 1024 TB = 1 PB (Petabyte)

Note: Memory calculations use powers of 2
- 2^10 = 1024 (base for memory units)


TRANSISTOR STORAGE
==================

- Transistor stores 1 bit of information
- Acts as electronic switch
- ON state = 1, OFF state = 0
- Billions of transistors in modern processors
- Foundation of all digital storage


C++ PROGRAMMING FUNDAMENTALS
============================

HEADER FILES
- #include <iostream>
- Contains function declarations and definitions
- iostream for input/output operations
- Must include appropriate headers for different functions

MAIN FUNCTION
- Entry point of C++ program
- int main() - returns integer value
- Program execution starts from main()
- return 0 indicates successful program termination

BASIC OUTPUT
- cout << "Hello C++"
- cout is output stream object
- << is insertion operator
- Used to display text and variables
- Requires iostream header

PROGRAM STRUCTURE
- Preprocessor directives (#include)
- Function declarations
- Main function
- Statements and expressions
- Return statement


VARIABLE AND DATA TYPES IN C++
==============================

INTEGER TYPES
- int: 4 bytes (32 bits)
- Range: -2,147,483,648 to 2,147,483,647
- Used for whole numbers
- Most commonly used integer type

- long int: 8 bytes (64 bits) 
- Extended range for larger integers
- Used when int range is insufficient

FLOATING POINT TYPES
- float: 4 bytes (32 bits)
- Single precision floating point
- Approximately 7 decimal digits precision
- Uses less memory than double

- double: 8 bytes (64 bits)
- Double precision floating point
- Approximately 15-17 decimal digits precision
- More accurate than float
- Default choice for decimal numbers

CHARACTER TYPE
- char: 1 byte (8 bits)
- Stores single character
- ASCII values 0-255
- Examples: 'A', 'z', '5', '@'

BOOLEAN TYPE
- bool: 1 byte (8 bits)
- Stores true or false values
- true = 1, false = 0
- Used for logical operations


MEMORY ALLOCATION
=================

STACK MEMORY
- Automatic allocation for local variables
- Fast access
- Limited size
- Automatically deallocated when scope ends
- LIFO (Last In First Out) structure

HEAP MEMORY
- Dynamic allocation using new/malloc
- Larger memory space available
- Manual deallocation required (delete/free)
- Slower access compared to stack
- Risk of memory leaks if not properly managed


VARIABLE DECLARATION AND INITIALIZATION
=======================================

DECLARATION SYNTAX
- datatype variablename;
- Examples:
  int age;
  float salary;
  char grade;
  bool isActive;

INITIALIZATION
- Assign value during declaration
- int count = 0;
- float pi = 3.14159;
- char letter = 'A';
- bool flag = true;

MULTIPLE DECLARATIONS
- int a, b, c;
- int x = 5, y = 10, z = 15;


CONSTANTS
=========

LITERAL CONSTANTS
- Fixed values in program
- Integer: 42, -15
- Float: 3.14, -2.5f
- Character: 'A', '\n'
- String: "Hello World"

SYMBOLIC CONSTANTS
- const keyword
- const int MAX_SIZE = 100;
- const float PI = 3.14159;
- Cannot be modified after declaration
- Good practice for fixed values


ASCII TABLE REFERENCE
=====================

IMPORTANT ASCII VALUES
- 'A' to 'Z': 65 to 90
- 'a' to 'z': 97 to 122  
- '0' to '9': 48 to 57
- Space: 32
- Newline: 10
- Tab: 9

CONTROL CHARACTERS
- \n: Newline
- \t: Tab
- \r: Carriage return
- \b: Backspace
- \\: Backslash
- \": Double quote
- \': Single quote


INPUT OUTPUT OPERATIONS
=======================

OUTPUT OPERATIONS
- cout << variable;
- cout << "text" << variable;
- cout << variable1 << variable2;
- endl for newline: cout << "Hello" << endl;

INPUT OPERATIONS
- cin >> variable;
- cin >> variable1 >> variable2;
- Reads from keyboard
- Whitespace separated for multiple inputs

FORMATTED OUTPUT
- #include <iomanip>
- setw(): Set field width
- setprecision(): Set decimal places
- fixed: Fixed decimal notation
- left/right: Text alignment


OPERATORS IN C++
=================

ARITHMETIC OPERATORS
- +: Addition
- -: Subtraction  
- *: Multiplication
- /: Division
- %: Modulus (remainder)

ASSIGNMENT OPERATORS
- =: Simple assignment
- +=: Add and assign
- -=: Subtract and assign
- *=: Multiply and assign
- /=: Divide and assign
- %=: Modulus and assign

COMPARISON OPERATORS
- ==: Equal to
- !=: Not equal to
- <: Less than
- >: Greater than
- <=: Less than or equal
- >=: Greater than or equal

LOGICAL OPERATORS
- &&: Logical AND
- ||: Logical OR
- !: Logical NOT

INCREMENT/DECREMENT
- ++: Increment by 1
- --: Decrement by 1
- Pre-increment: ++variable
- Post-increment: variable++


PROGRAMMING BEST PRACTICES
==========================

NAMING CONVENTIONS
- Use meaningful variable names
- Start with letter or underscore
- No spaces in names
- Use camelCase or snake_case
- Avoid reserved keywords

CODE ORGANIZATION
- Proper indentation
- Meaningful comments
- Group related code
- Use blank lines for readability

MEMORY MANAGEMENT
- Initialize variables before use
- Free dynamically allocated memory
- Avoid memory leaks
- Use appropriate data types for memory efficiency

ERROR PREVENTION
- Check input validity
- Handle division by zero
- Validate array bounds
- Use const for unchanging values